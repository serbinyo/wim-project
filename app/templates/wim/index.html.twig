{% extends 'base.html.twig' %}

{% block title %}Главная страница!{% endblock %}

{% block stylesheets %}
    <style>
        body {
            font-family: sans-serif;
            display: grid;
            height: 100vh;
            place-items: center;
        }

        .base-timer {
            position: relative;
            width: 300px;
            height: 300px;
        }

        .base-timer__svg {
            transform: scaleX(-1);
        }

        .base-timer__circle {
            fill: none;
            stroke: none;
        }

        .base-timer__path-elapsed {
            stroke-width: 7px;
            stroke: grey;
        }

        .base-timer__path-remaining {
            stroke-width: 7px;
            stroke-linecap: round;
            transform: rotate(90deg);
            transform-origin: center;
            transition: 1s linear all;
            fill-rule: nonzero;
            stroke: currentColor;
        }

        .base-timer__path-remaining.green {
            color: rgb(65, 184, 131);
        }

        .base-timer__path-remaining.orange {
            color: orange;
        }

        .base-timer__path-remaining.red {
            color: red;
        }

        .base-timer__label {
            position: absolute;
            width: 300px;
            height: 300px;
            top: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
        }

    </style>
{% endblock %}

{% block body %}
    <div class="container">
        <br>
        <div class="row">
            <div class="col-md-8 mx-auto">
                <iframe width="560" height="315" src="https://www.youtube.com/embed/mD3QwerSmLs"
                        title="YouTube video player" frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen></iframe>

                <div id="app"></div>
                <div id="app2"></div>
                <div id="app3"></div>

                <button class="btn" onclick="drawTimer(document.getElementById('seconds').value)">Старт</button>

                <input type="text" id="seconds">
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
{#    <script>#}
{#        // Credit: Mateusz Rybczonec#}

{#        let TIME_LIMIT = 5;#}
{#        const FULL_DASH_ARRAY = 283;#}
{#        const WARNING_THRESHOLD = TIME_LIMIT / 100 * 20;#}
{#        const ALERT_THRESHOLD = TIME_LIMIT / 100 * 5;#}
{#        const COLOR_CODES = {#}
{#            info   : {#}
{#                color: "green"#}
{#            },#}
{#            warning: {#}
{#                color    : "orange",#}
{#                threshold: WARNING_THRESHOLD#}
{#            },#}
{#            alert  : {#}
{#                color    : "red",#}
{#                threshold: ALERT_THRESHOLD#}
{#            }#}
{#        };#}

{#        let timePassed = 0;#}
{#        let timeLeft = TIME_LIMIT;#}
{#        let timerInterval = null;#}
{#        let remainingPathColor = COLOR_CODES.info.color;#}

{#        drawTimer(10);#}

{#        function drawTimer(time_limit) {#}
{#            TIME_LIMIT = time_limit;#}
{#            if (TIME_LIMIT == 0) return;#}

{#            resetTimer();#}

{#            document.getElementById("app").innerHTML = `#}
{#                <div class="base-timer">#}
{#                  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">#}
{#                    <g class="base-timer__circle">#}
{#                      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>#}
{#                      <path#}
{#                        id="base-timer-path-remaining"#}
{#                        stroke-dasharray="283"#}
{#                        class="base-timer__path-remaining ${remainingPathColor}"#}
{#                        d="#}
{#                          M 50, 50#}
{#                          m -45, 0#}
{#                          a 45,45 0 1,0 90,0#}
{#                          a 45,45 0 1,0 -90,0#}
{#                        "#}
{#                      ></path>#}
{#                    </g>#}
{#                  </svg>#}
{#                  <span id="base-timer-label" class="base-timer__label">${formatTime(#}
{#                timeLeft#}
{#            )}</span>#}
{#                </div>#}
{#                `;#}

{#            runTimer();#}
{#        }#}

{#        function onTimesUp() {#}
{#            clearInterval(timerInterval);#}
{#            document.getElementById("app").innerHTML = '';#}
{#        }#}

{#        function resetTimer() {#}
{#            timePassed = 0;#}
{#            timeLeft = TIME_LIMIT;#}
{#            timerInterval = null;#}
{#            remainingPathColor = COLOR_CODES.info.color;#}
{#        }#}


{#        function runTimer() {#}
{#            timerInterval = setInterval(() => {#}
{#                timePassed = timePassed += 1;#}
{#                timeLeft = TIME_LIMIT - timePassed;#}
{#                document.getElementById("base-timer-label").innerHTML = formatTime(#}
{#                    timeLeft#}
{#                );#}
{#                setCircleDasharray();#}
{#                setRemainingPathColor(timeLeft);#}

{#                if (timeLeft === 0) {#}
{#                    onTimesUp();#}
{#                }#}
{#            }, 1000);#}

{#            return true#}
{#        }#}

{#        function formatTime(time) {#}
{#            const minutes = Math.floor(time / 60);#}
{#            let seconds = time % 60;#}

{#            if (seconds < 10) {#}
{#                seconds = `0${seconds}`;#}
{#            }#}

{#            return `${minutes}:${seconds}`;#}
{#        }#}

{#        function setRemainingPathColor(timeLeft) {#}
{#            const {alert, warning, info} = COLOR_CODES;#}
{#            if (timeLeft <= alert.threshold) {#}
{#                document#}
{#                    .getElementById("base-timer-path-remaining")#}
{#                    .classList.remove(warning.color);#}
{#                document#}
{#                    .getElementById("base-timer-path-remaining")#}
{#                    .classList.add(alert.color);#}
{#            } else if (timeLeft <= warning.threshold) {#}
{#                document#}
{#                    .getElementById("base-timer-path-remaining")#}
{#                    .classList.remove(info.color);#}
{#                document#}
{#                    .getElementById("base-timer-path-remaining")#}
{#                    .classList.add(warning.color);#}
{#            }#}
{#        }#}

{#        function calculateTimeFraction() {#}
{#            const rawTimeFraction = timeLeft / TIME_LIMIT;#}
{#            return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);#}
{#        }#}

{#        function setCircleDasharray() {#}
{#            const circleDasharray = `${(#}
{#                calculateTimeFraction() * FULL_DASH_ARRAY#}
{#            ).toFixed(0)} 283`;#}
{#            document#}
{#                .getElementById("base-timer-path-remaining")#}
{#                .setAttribute("stroke-dasharray", circleDasharray);#}
{#        }#}

{#    </script>#}

    <script>
        class Timer {

            domElement;
            TIME_LIMIT;
            FULL_DASH_ARRAY;
            WARNING_THRESHOLD;
            ALERT_THRESHOLD;
            COLOR_CODES;
            timePassed;
            timeLeft;
            timerInterval;
            remainingPathColor;

            constructor(domElement, timeLimit) {
                this.domElement = domElement;
                this.TIME_LIMIT = timeLimit;
                this.FULL_DASH_ARRAY = 283;
                this.WARNING_THRESHOLD = this.TIME_LIMIT / 100 * 20;
                this.ALERT_THRESHOLD = this.TIME_LIMIT / 100 * 5;
                this.COLOR_CODES = {
                    info   : {
                        color: "green"
                    },
                    warning: {
                        color    : "orange",
                        threshold: this.WARNING_THRESHOLD
                    },
                    alert  : {
                        color    : "red",
                        threshold: this.ALERT_THRESHOLD
                    }
                };

                this.timePassed = 0;
                this.timeLeft = this.TIME_LIMIT;
                this.timerInterval = null;
                this.remainingPathColor = this.COLOR_CODES.info.color;
            }

            startTimer() {
                if (this.TIME_LIMIT == 0) return;

                this.resetTimer();

                document.getElementById(this.domElement).innerHTML = `
                <div class="base-timer">
                  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <g class="base-timer__circle">
                      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                      <path
                        id="base-timer-path-remaining-${this.domElement}"
                        stroke-dasharray="283"
                        class="base-timer__path-remaining ${this.remainingPathColor}"
                        d="
                          M 50, 50
                          m -45, 0
                          a 45,45 0 1,0 90,0
                          a 45,45 0 1,0 -90,0
                        "
                      ></path>
                    </g>
                  </svg>
                  <span id="base-timer-label-${this.domElement}" class="base-timer__label">${this.formatTime(
                    this.timeLeft
                )}</span>
                </div>
                `;

                this.runTimer();
            }

            onTimesUp() {
                clearInterval(this.timerInterval);
                document.getElementById(this.domElement).innerHTML = '';
            }

            resetTimer() {
                this.timePassed = 0;
                this.timeLeft = this.TIME_LIMIT;
                this.timerInterval = null;
                this.remainingPathColor = this.COLOR_CODES.info.color;
            }


            runTimer() {
                this.timerInterval = setInterval(() => {
                    this.timePassed = this.timePassed += 1;
                    this.timeLeft = this.TIME_LIMIT - this.timePassed;
                    document.getElementById(`base-timer-label-${this.domElement}`).innerHTML = this.formatTime(
                        this.timeLeft
                    );
                    this.setCircleDasharray();
                    this.setRemainingPathColor(this.timeLeft);

                    if (this.timeLeft === 0) {
                        this.onTimesUp();
                    }
                }, 1000);

                return true
            }

            formatTime(time) {
                const minutes = Math.floor(time / 60);
                let seconds = time % 60;

                if (seconds < 10) {
                    seconds = `0${seconds}`;
                }

                return `${minutes}:${seconds}`;
            }

            setRemainingPathColor(timeLeft) {
                const {alert, warning, info} = this.COLOR_CODES;
                if (timeLeft <= alert.threshold) {
                    document
                        .getElementById(`base-timer-path-remaining-${this.domElement}`)
                        .classList.remove(warning.color);
                    document
                        .getElementById(`base-timer-path-remaining-${this.domElement}`)
                        .classList.add(alert.color);
                } else if (timeLeft <= warning.threshold) {
                    document
                        .getElementById(`base-timer-path-remaining-${this.domElement}`)
                        .classList.remove(info.color);
                    document
                        .getElementById(`base-timer-path-remaining-${this.domElement}`)
                        .classList.add(warning.color);
                }
            }

            calculateTimeFraction() {
                const rawTimeFraction = this.timeLeft / this.TIME_LIMIT;
                return rawTimeFraction - (1 / this.TIME_LIMIT) * (1 - rawTimeFraction);
            }

            setCircleDasharray() {
                const circleDasharray = `${(
                    this.calculateTimeFraction() * this.FULL_DASH_ARRAY
                ).toFixed(0)} 283`;
                document
                    .getElementById(`base-timer-path-remaining-${this.domElement}`)
                    .setAttribute(`stroke-dasharray-${this.domElement}`, circleDasharray);
            }
        }

        let timer = new Timer('app', 5);
        let timer2 = new Timer('app2', 5);
        let timer3 = new Timer('app3', 10);
        timer.startTimer();
        timer2.startTimer();
        timer3.startTimer();
    </script>
{% endblock %}